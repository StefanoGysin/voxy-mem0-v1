"""
Utilit√°rio para configurar o banco de dados Supabase para o Voxy-Mem0.
Este script verifica e cria a extens√£o pgvector necess√°ria para o armazenamento vetorial.
"""

import os
import sys
import logging
from dotenv import load_dotenv
import psycopg2
from psycopg2 import sql
import time

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("setup-supabase")

# Vers√£o do utilit√°rio
__version__ = "1.0.0"

def check_connection(database_url, max_retries=3):
    """
    Verifica a conex√£o com o banco de dados com m√∫ltiplas tentativas
    
    Args:
        database_url: URL de conex√£o com o banco de dados
        max_retries: N√∫mero m√°ximo de tentativas de conex√£o
        
    Returns:
        bool: True se a conex√£o for bem-sucedida, False caso contr√°rio
    """
    logger.info("Verificando conex√£o com o banco de dados Supabase...")
    
    for attempt in range(1, max_retries + 1):
        try:
            conn = psycopg2.connect(database_url, connect_timeout=10)
            conn.close()
            logger.info("‚úÖ Conex√£o estabelecida com sucesso!")
            return True
        except Exception as e:
            logger.warning(f"Tentativa {attempt}/{max_retries} falhou: {str(e)}")
            if attempt < max_retries:
                wait_time = 2 * attempt
                logger.info(f"Tentando novamente em {wait_time} segundos...")
                time.sleep(wait_time)
            else:
                logger.error("‚ùå N√£o foi poss√≠vel conectar ao banco de dados ap√≥s v√°rias tentativas.")
                return False

def list_vector_collections(database_url):
    """
    Lista todas as cole√ß√µes de vetores no banco de dados
    
    Args:
        database_url: URL de conex√£o com o banco de dados
        
    Returns:
        list: Lista de nomes das cole√ß√µes encontradas
    """
    logger.info("Buscando cole√ß√µes de vetores existentes...")
    collections = []
    
    try:
        conn = psycopg2.connect(database_url)
        cursor = conn.cursor()
        
        # Busca tabelas que come√ßam com 'vecs_' (padr√£o do Supabase para cole√ß√µes vetoriais)
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_name LIKE 'vecs_%'
            ORDER BY table_name;
        """)
        
        rows = cursor.fetchall()
        for row in rows:
            collection_name = row[0]
            # Remove o prefixo 'vecs_' para obter o nome real da cole√ß√£o
            actual_name = collection_name[5:] if collection_name.startswith('vecs_') else collection_name
            collections.append({
                "table_name": collection_name,
                "collection_name": actual_name
            })
        
        if not collections:
            logger.info("Nenhuma cole√ß√£o de vetores encontrada no banco de dados.")
        else:
            logger.info(f"Encontradas {len(collections)} cole√ß√µes de vetores.")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"Erro ao listar cole√ß√µes: {str(e)}")
    
    return collections

def setup_database():
    """
    Configura o banco de dados Supabase para uso com o Voxy-Mem0.
    - Verifica a conex√£o
    - Cria a extens√£o pgvector se necess√°rio
    - Lista cole√ß√µes existentes
    
    Returns:
        bool: True se a configura√ß√£o for bem-sucedida, False caso contr√°rio
    """
    # Carrega vari√°veis de ambiente
    load_dotenv()
    
    # Verifica se a vari√°vel de ambiente DATABASE_URL est√° configurada
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        logger.error("‚ùå Vari√°vel de ambiente DATABASE_URL n√£o encontrada.")
        logger.error("Por favor, configure o arquivo .env com as informa√ß√µes corretas.")
        sys.exit(1)
    
    # Verifica conex√£o
    if not check_connection(database_url):
        return False
    
    try:
        # Conecta ao banco de dados
        conn = psycopg2.connect(database_url)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # Verifica se a extens√£o pgvector j√° est√° instalada
        cursor.execute("SELECT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'vector');")
        extension_exists = cursor.fetchone()[0]
        
        if extension_exists:
            logger.info("‚úÖ Extens√£o pgvector j√° est√° instalada.")
        else:
            logger.info("‚è≥ Instalando extens√£o pgvector...")
            cursor.execute("CREATE EXTENSION IF NOT EXISTS vector;")
            logger.info("‚úÖ Extens√£o pgvector instalada com sucesso!")
        
        # Verifica se a tabela de mem√≥rias existe
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'vecs_voxy_memories'
            );
        """)
        table_exists = cursor.fetchone()[0]
        
        if not table_exists:
            logger.info("‚ÑπÔ∏è A tabela de mem√≥rias ser√° criada automaticamente pelo mem0 na primeira execu√ß√£o.")
        else:
            logger.info("‚úÖ Tabela de mem√≥rias (vecs_voxy_memories) j√° existe.")
        
        # Fecha a conex√£o
        cursor.close()
        conn.close()
        
        # Lista cole√ß√µes existentes
        print("\nListando cole√ß√µes de vetores...")
        collections = list_vector_collections(database_url)
        
        if collections:
            print("\nüìä Cole√ß√µes de vetores encontradas:")
            print("-" * 50)
            print(f"{'Tabela':<30} {'Nome da Cole√ß√£o':<20}")
            print("-" * 50)
            for coll in collections:
                print(f"{coll['table_name']:<30} {coll['collection_name']:<20}")
            print("-" * 50)
        else:
            print("\n‚ö†Ô∏è Nenhuma cole√ß√£o de vetores encontrada.")
            print("   A cole√ß√£o 'vecs_voxy_memories' ser√° criada na primeira execu√ß√£o do agente.")
        
        logger.info("‚úÖ Configura√ß√£o do banco de dados conclu√≠da com sucesso!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao configurar o banco de dados: {str(e)}")
        logger.error("Verifique se a URL de conex√£o est√° correta e se o banco de dados est√° acess√≠vel.")
        
        # Dicas espec√≠ficas para erros comuns
        error_str = str(e).lower()
        if "password authentication failed" in error_str:
            logger.error("üìå DICA: Verifique se a senha no DATABASE_URL est√° correta.")
        elif "could not connect to server" in error_str:
            logger.error("üìå DICA: Verifique se o servidor est√° online e acess√≠vel pela internet.")
        elif "connection refused" in error_str:
            logger.error("üìå DICA: Verifique se as regras de firewall permitem a conex√£o.")
        
        return False

def display_banner():
    """Exibe o banner do utilit√°rio de configura√ß√£o"""
    banner = f"""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           CONFIGURA√á√ÉO SUPABASE               ‚ïë
    ‚ïë       Para Voxy-Mem0 - Mem√≥ria Vetorial       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)
    print("  üîß Utilit√°rio de verifica√ß√£o e configura√ß√£o da base de dados")
    print("  üîí Configura√ß√£o de extens√µes e tabelas necess√°rias")
    print("  üìä Diagn√≥stico de conex√£o e cole√ß√µes vetoriais\n")

if __name__ == "__main__":
    display_banner()
    
    success = setup_database()
    
    if success:
        print("\n‚úÖ Banco de dados configurado com sucesso!")
        print("   Todas as extens√µes necess√°rias est√£o instaladas.")
        print("   Voc√™ j√° pode executar o Voxy-Mem0 com 'python voxy_agent.py'")
    else:
        print("\n‚ùå Falha na configura√ß√£o do banco de dados.")
        print("   Verifique os logs acima para detalhes do erro.")
        print("   Certifique-se de que:")
        print("   1. O arquivo .env est√° configurado corretamente")
        print("   2. A URL do banco de dados est√° correta")
        print("   3. O banco de dados est√° acess√≠vel pela internet")
        print("   4. As credenciais est√£o corretas") 